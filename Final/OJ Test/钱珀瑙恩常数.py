# 题目内容：
# 钱珀瑙恩常数是由英国统计学家钱珀瑙恩（Champernowne）于1933年构造出来的。其定义为：把全体正整数从小到大依次写成一排，并在最前面加上小数点，得到的一个无理数称为钱珀瑙恩常数。十进制下它长得像:
# C_10 = 0.12345678910111213141516...
# 我们希望找出此数值的小数点后第n位的值，其中计数从1开始。

# 输入格式:
# 一个正整数，代表上述n，1<=n<=2^31-1=2147483647

# 输出格式：
# k，其中k是一个非负整数，代表按上述条件得到的第n位的值。显然，0<=k<=9。

# 输入样例：
# 1

# 输出样例：
# 1
# 说明：C_10的小数点后第1位是1

# 输入样例：
# 11

# 输出样例：
# 0
# 说明：C_10的小数点后第11位是0

# refer to: http://www.daqizhe.cn/blog/119.html?cg1860/article/details/117880344


def cal(n):
    i = 0
    while n-9*(i+1)*10**i>0:
        n=n-9*(i+1)*10**i
        i+=1
    loc, seq=n%(i+1), n//(i+1)
    seq=seq if loc == 0 else seq + 1
    return str(10**i + seq - 1)[loc - 1]

num = int(input())
print(cal(num))
